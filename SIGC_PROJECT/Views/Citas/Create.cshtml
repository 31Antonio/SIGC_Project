@model SIGC_PROJECT.Models.ViewModel.CrearCitasVM

@{
    ViewData["Title"] = "Crear Cita";
    // Lista de días disponibles (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
    var disponibilidades = Model.Disponibilidades.Select(d => d.Dia).ToList();
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-11">
            <div class="card mt-2">
                <div class="card-header text-center">
                    <h2 style="font-weight: bold; font-size: 1.7em; color: #04294F;">Agendar Cita</h2>
                </div>

                <div class="card-body">
                    <form asp-action="Create" method="post">
                        <div class="form-group mt-4">
                            <label class="control-label">Información del Doctor</label>
                            <input type="hidden" asp-for="DoctorId" />
                            <input type="hidden" asp-for="NombreDoctor" />
                            <input type="hidden" asp-for="EspecialidadDoctor" />
                            <input type="text" class="form-control" value="@Model.NombreDoctor (@Model.EspecialidadDoctor)" readonly />
                        </div>

                        @if (User.IsInRole("Secretaria"))
                        {
                            <div class="form-group  mt-3">
                                <label asp-for="NombrePaciente" class="control-label">Nombre del Paciente</label>
                                <input asp-for="NombrePaciente" class="form-control" />
                                <span asp-validation-for="NombrePaciente" class="text-danger"></span>
                            </div>
                        }

                        <div class="form-group  mt-4">
                            <label asp-for="FechaCita" class="control-label">Seleccione una fecha:</label>
                            <input asp-for="FechaCita" id="fechaCita" class="form-control" type="date" required />
                            <span asp-validation-for="FechaCita" class="text-danger"></span>
                        </div>

                        <label class="control-label  mt-4" id="lbHora" style="display: none;">Horas Disponibles</label>
                        <div id="horaCitasContainer" class="mt-3">
                            <!-- Aquí se generarán los botones para las horas disponibles -->
                        </div>
                        <input type="hidden" asp-for="HoraCita" required />

                        <div class="form-group  mt-4">
                            <label asp-for="Comentario" class="control-label">Motivo de la Cita</label>
                            <input asp-for="Comentario" class="form-control" required />
                            <span asp-validation-for="Comentario" class="text-danger"></span>
                        </div>

                        <div id="mensajeAlert" class="alert alert-danger text-center font-weight-bold mt-4 mb-4" style="font-size: 1.2em; display:none;">
                            El doctor no está disponible esta fecha
                        </div>
                        
                        <div id="mensajeAlertHoras" class="alert alert-danger text-center font-weight-bold mt-4 mb-4" style="font-size: 1.2em; display:none;">
                            Todas las horas se encuentran ocupadas, por favor seleccionar otra fecha. 
                        </div>

                        <div class="text-center mt-4">
                            <button type="submit" class="btn btn-registro">Agendar cita</button>
                            <a asp-controller="DisponibilidadDoctors" asp-action="VerDisponibilidad" class="btn btn-danger font-weight-bold" style="width: 30%;">Cancelar</a>
                        </div>
                    </form>
                </div>

            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    @*FUNCIONALIDADES*@
    <script>
        //Deshabilitar dias no disponibles
        document.addEventListener("DOMContentLoaded", function () {
            var disponibilidades = @Html.Raw(Json.Serialize(disponibilidades));
            var fechaInput = document.getElementById("fechaCita");

            // Diccionario para mapear los nombres de los días a valores numéricos
            var mapearDias = {
                "Domingo": 0,
                "Lunes": 1,
                "Martes": 2,
                "Miercoles": 3,
                "Jueves": 4,
                "Viernes": 5,
                "Sabado": 6
            };

            // Convertir los nombres de los días a sus valores numéricos
            var diasDisponibles = disponibilidades.map(function (dia) {
                return mapearDias[dia];
            });

            fechaInput.addEventListener('input', function () {
                var selecFecha = new Date(this.value);
                var dias = selecFecha.getUTCDay();

                if (!diasDisponibles.includes(dias)){
                    document.getElementById('mensajeAlert').style.display = 'block';
                    setInterval(function() {
                        document.getElementById('mensajeAlert').style.display = 'none';
                    }, 3000);
                    this.value = '';
                    document.getElementById('lbHora').style.display = 'none';
                    document.getElementById('horaCitasContainer').innerHTML = '';
                }
            });

            fechaInput.addEventListener('focus', function () {
                this.setAttribute("min", new Date().toISOString().split("T")[0]); //La fecha de hoy es la minima
            });

            fechaInput.addEventListener('change', function () {
                var fecha = this.value;
                var doctorId = document.getElementById('DoctorId').value;

                var diasSemana = ['domingo', 'lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado'];

                // Crear un objeto Date y ajustar la hora para evitar desfases de zona horaria
                var partesFecha = fecha.split('-');
                var fechaObj = new Date(partesFecha[0], partesFecha[1] - 1, partesFecha[2]);
                var diaSemana = diasSemana[fechaObj.getUTCDay()];;


                var datos = {
                    DoctorId: doctorId,
                    Dia: diaSemana
                };

                var datosHora = {
                    DoctorId: doctorId,
                    Fecha: fecha
                };

                console.log(datos)

                fetch('/Citas/ObtenerDisponibilidadDoctor', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(datos)
                })
                .then(response => response.json())
                .then(data => {
                    if(data) {
                        var horaInicio = new Date(`1970-01-01T${data.horaInicio}:00`);
                        var horaFin = new Date(`1970-01-01T${data.horaFin}:00`);

                        //Ajustar para que las citas sean media hora despues del inicio y antes del final
                        horaInicio.setMinutes(horaInicio.getMinutes() + 30);
                        horaFin.setMinutes(horaFin.getMinutes() - 30);

                        var intervalo = 20; // Intervalo fijo de 20 minutos
                        var opcionesHora = [];

                        fetch('/Citas/ObtenerHorasOcupadas', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(datosHora)
                            })
                            .then(response => response.json())
                            .then(horasOcupadas => {
                                //Generar las horas disponibles
                                while (horaInicio <= horaFin) {
                                    var horaFormateada = horaInicio.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
                                    var horaActual = horaInicio.getHours() * 60 + horaInicio.getMinutes();

                                        if (!(horaActual >= 720 && horaActual < 810) && !horasOcupadas.includes(horaFormateada)) { // Excluir 12:00 PM - 1:30 PM
                                        opcionesHora.push(horaFormateada);
                                    }

                                    horaInicio.setMinutes(horaInicio.getMinutes() + intervalo);
                                }

                                //En caso de que todas las horas se encuentren ocupadas
                                if(opcionesHora.length == 0){
                                    document.getElementById('mensajeAlertHoras').style.display = 'block';
                                    setTimeout(function () {
                                            document.getElementById('mensajeAlertHoras').style.display = 'none';
                                    }, 3000);
                                    document.getElementById('horaCitasContainer').innerHTML = '';
                                    document.getElementById("lbHora").style.display = "none";
                                    return;
                                }

                                // Poblar el contenedor de botones
                                var horaCitasContainer = document.getElementById('horaCitasContainer');
                                horaCitasContainer.innerHTML = ''; // Limpiar el contenedor

                                opcionesHora.forEach(hora => {
                                    var button = document.createElement('button');
                                    button.type = 'button';
                                    button.className = 'btn btn-hora m-1';
                                    button.textContent = hora;
                                    button.dataset.hora = hora;

                                    //Manejar el evento click del boton
                                    button.addEventListener('click', function () {
                                        document.querySelectorAll("#horaCitasContainer button").forEach(btn => btn.classList.remove('btn-estilo'));
                                        button.classList.add('btn-estilo');
                                        document.getElementById("HoraCita").value = button.dataset.hora;
                                    });

                                    horaCitasContainer.appendChild(button);
                                });

                            });

                        document.getElementById("lbHora").style.display = "block";
                    }
                });

            });
            //====================================================//
        });
    </script>

    @*ESTILOS CSS*@
    <style>
        #horaCitasContainer {
            background-color: #ECEFF2;
            display: flex;
            flex-wrap: wrap; 
            justify-content: space-around;
            align-items: center; 
            gap: 5px;
            padding: 10px;
        }

        .control-label { 
            font-weight: bold;
            color: #04294F;
        }

        .btn-hora {
            flex: 1 1 calc(25% - 20px);
            border: 2px solid rgba(42, 62, 84, 1);
            min-width: 20%;
            box-sizing: border-box;
        }

        .btn-estilo {
            background-color: rgba(42, 62, 84, 1);
            color: #FFFFFF;
            transition: background-color 0.5s linear;
        }

        .btn-estilo:hover, .btn-registro:hover{
                background-color: #04294F;
            color: #FFFFFF;
        }

        .btn-registro {
            background-color: rgba(42, 62, 84, 1);
            color: #FFFFFF;
            transition: background-color 0.5s linear;
            width: 30%;
            font-weight: bold;
        }

        </style>
}
