@model SIGC_PROJECT.Models.ViewModel.CrearCitasVM

@{
    ViewData["Title"] = "Crear Cita";
    // Lista de días disponibles (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
    var disponibilidades = Model.Disponibilidades.Select(d => d.Dia).ToList();
}

<h1>Create</h1>

<h4>Cita</h4>
<hr />

<form asp-action="Create" method="post">
    <div class="form-group">
        <label>Doctor</label>
        <input type="hidden" asp-for="DoctorId" />
        <input type="hidden" asp-for="NombreDoctor"/>
        <input type="hidden" asp-for="EspecialidadDoctor"/>
        <input type="text" class="form-control" value="@Model.NombreDoctor (@Model.EspecialidadDoctor)" readonly />
    </div>

    @if (User.IsInRole("Secretaria"))
    {
        <div class="form-group">
            <label asp-for="NombrePaciente" class="control-label"></label>
            <input asp-for="NombrePaciente" class="form-control"/>
            <span asp-validation-for="NombrePaciente" class="text-danger"></span>
        </div>
    }

    <div class="form-group">
        <label asp-for="FechaCita" class="control-label"></label>
        <input asp-for="FechaCita" id="fechaCita" class="form-control" type="date" />
        <span asp-validation-for="FechaCita" class="text-danger"></span>
    </div>

    <label class="form-label" id="lbHora" style="display: none;">Horas Disponibles</label>
    <div id="horaCitasContainer" class="mt-3">
    <!-- Aquí se generarán los botones para las horas disponibles -->
    </div>
    <input type="hidden" asp-for="HoraCita"/>

    <div class="form-group">
        <label asp-for="Comentario" class="control-label">Motivo de la Cita</label>
        <input asp-for="Comentario" class="form-control" />
        <span asp-validation-for="Comentario" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">Crear</button>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    @*FUNCIONALIDADES*@
    <script>
        //Deshabilitar dias no disponibles
        document.addEventListener("DOMContentLoaded", function () {
            var disponibilidades = @Html.Raw(Json.Serialize(disponibilidades));
            var fechaInput = document.getElementById("fechaCita");

            // Diccionario para mapear los nombres de los días a valores numéricos
            var mapearDias = {
                "Domingo": 0,
                "Lunes": 1,
                "Martes": 2,
                "Miercoles": 3,
                "Jueves": 4,
                "Viernes": 5,
                "Sabado": 6
            };

            // Convertir los nombres de los días a sus valores numéricos
            var diasDisponibles = disponibilidades.map(function (dia) {
                return mapearDias[dia];
            });

            fechaInput.addEventListener('input', function () {
                var selecFecha = new Date(this.value);
                var dias = selecFecha.getUTCDay();

                if (!diasDisponibles.includes(dias)){
                    alert("El doctor no esta disponible esta fecha");
                    this.value = '';
                }
            });

            fechaInput.addEventListener('focus', function () {
                this.setAttribute("min", new Date().toISOString().split("T")[0]); //La fecha de hoy es la minima
            });

            fechaInput.addEventListener('change', function () {
                var fecha = this.value;
                var doctorId = document.getElementById('DoctorId').value;

                var diasSemana = ['domingo', 'lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado'];

                // Crear un objeto Date y ajustar la hora para evitar desfases de zona horaria
                var partesFecha = fecha.split('-');
                var fechaObj = new Date(partesFecha[0], partesFecha[1] - 1, partesFecha[2]);
                var diaSemana = diasSemana[fechaObj.getUTCDay()];;


                var datos = {
                    DoctorId: doctorId,
                    Dia: diaSemana
                };

                var datosHora = {
                    DoctorId: doctorId,
                    Fecha: fecha
                };

                console.log(datos)

                fetch('/Citas/ObtenerDisponibilidadDoctor', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(datos)
                })
                .then(response => response.json())
                .then(data => {
                    if(data) {
                        var horaInicio = new Date(`1970-01-01T${data.horaInicio}:00`);
                        var horaFin = new Date(`1970-01-01T${data.horaFin}:00`);

                        //Ajustar para que las citas sean media hora despues del inicio y antes del final
                        horaInicio.setMinutes(horaInicio.getMinutes() + 30);
                        horaFin.setMinutes(horaFin.getMinutes() - 30);

                        var intervalo = 20; // Intervalo fijo de 20 minutos
                        var opcionesHora = [];

                        fetch('/Citas/ObtenerHorasOcupadas', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(datosHora)
                            })
                            .then(response => response.json())
                            .then(horasOcupadas => {
                                //Generar las horas disponibles
                                while (horaInicio <= horaFin) {
                                    var horaFormateada = horaInicio.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
                                    var horaActual = horaInicio.getHours() * 60 + horaInicio.getMinutes();

                                        if (!(horaActual >= 720 && horaActual < 810) && !horasOcupadas.includes(horaFormateada)) { // Excluir 12:00 PM - 1:30 PM
                                        opcionesHora.push(horaFormateada);
                                    }

                                    horaInicio.setMinutes(horaInicio.getMinutes() + intervalo);
                                }

                                // Poblar el contenedor de botones
                                var horaCitasContainer = document.getElementById('horaCitasContainer');
                                horaCitasContainer.innerHTML = ''; // Limpiar el contenedor

                                opcionesHora.forEach(hora => {
                                    var button = document.createElement('button');
                                    button.type = 'button';
                                    button.className = 'btn btn-outline-primary m-1';
                                    button.textContent = hora;
                                    button.dataset.hora = hora;

                                    //Manejar el evento click del boton
                                    button.addEventListener('click', function () {
                                        document.querySelectorAll("#horaCitasContainer button").forEach(btn => btn.classList.remove('btn-primary'));
                                        button.classList.add('btn-primary');
                                        document.getElementById("HoraCita").value = button.dataset.hora;
                                    });

                                    horaCitasContainer.appendChild(button);
                                });

                            });

                        document.getElementById("lbHora").style.display = "block";
                    }
                });

            });
            //====================================================//
        });
    </script>

    @*ESTILOS CSS*@
    <style>
    </style>
}
